#include <iostream>
#include <string>
#include <cmath>

using namespace std;

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

bool isDigit(char c) {
    return c >= '0' && c <= '9';
}

int findNextOperatorIndex(const string& problem, int startIndex) {
    int parentheses = 0;
    for (int i = startIndex; i < problem.length(); ++i) {
        if (problem[i] == '(') {
            parentheses++;
        } else if (problem[i] == ')') {
            parentheses--;
        } else if (parentheses == 0 && isOperator(problem[i])) {
            return i;
        }
    }
    return -1;
}

double evaluateOperation(double operand1, char op, double operand2) {
    switch (op) {
        case '+':
            return operand1 + operand2;
        case '-':
            return operand1 - operand2;
        case '*':
            return operand1 * operand2;
        case '/':
            if (operand2 == 0) {
                cout << "Error: Division by zero!" << endl;
                exit(EXIT_FAILURE);
            }
            return operand1 / operand2;
        case '^':
            return pow(operand1, operand2);
        default:
            cout << "Error: Invalid operator!" << endl;
            exit(EXIT_FAILURE);
    }
}

double solveProblem(string problem) {
    while (true) {
        int startIndex = 0;
        int endIndex = 0;
        char op;
        bool foundOperator = false;

        // Find next operator
        for (int i = 0; i < problem.length(); ++i) {
            if (problem[i] == '(') {
                startIndex = i;
            } else if (problem[i] == ')') {
                endIndex = i;
                foundOperator = true;
                break;
            } else if (isOperator(problem[i])) {
                endIndex = i;
                op = problem[i];
                foundOperator = true;
                break;
            }
        }

        if (!foundOperator) {
            break; // No more operators found
        }

        // Evaluate the operation
        string operand1_str = problem.substr(startIndex + 1, endIndex - startIndex - 1);
        double operand1 = stod(operand1_str);

        int nextOperatorIndex = findNextOperatorIndex(problem, endIndex + 1);
        string operand2_str = problem.substr(endIndex + 2, nextOperatorIndex - endIndex - 2);
        double operand2 = stod(operand2_str);

        double result = evaluateOperation(operand1, op, operand2);

        // Replace the operation with the result
        problem.replace(startIndex, nextOperatorIndex - startIndex, to_string(result));
    }

    return stod(problem);
}

int main() {
    char choice;
    do {
        cout << "Enter a problem to solve: ";
        string problem;
        getline(cin, problem);

        cout << "Here are the steps:" << endl;
        cout << problem << endl;

        double answer = solveProblem(problem);

        cout << "The answer to this problem is " << answer << "." << endl;
        cout << "Would you like to solve another problem? (Y/N) ";
        cin >> choice;
        cin.ignore(); // Clear the newline character from the buffer
    } while (toupper(choice) == 'Y');

    cout << "Thank you for using this calculator!" << endl;

    return 0;
}

