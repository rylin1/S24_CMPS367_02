#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
using namespace std;
class BankAccount {
private:
string name;
double balance;
int accountNumber;
static int nextAccountNumber;
public:
BankAccount(string n, double b) {
name = n;
balance = b;
srand(time(0));
accountNumber = ++nextAccountNumber;
}
void deposit(double amount) {
balance += amount;
}
bool withdraw(double amount) {
if (balance &gt;= amount) {
balance -= amount;
return true;
}
return false;
}
double getBalance() {
return balance;
}

int getAccountNumber() {
return accountNumber;
}
string getName() {
return name;
}
};
int BankAccount::nextAccountNumber = 0;
int main() {
const int MAX_ACCOUNTS = 100;
BankAccount* accounts[MAX_ACCOUNTS];
int numAccounts = 0;
cout &lt;&lt; &quot;*************** Welcome to Chase ***************&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;Please choose one of the following operations&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;1- Create a new bank account with an initial balance&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;2- Deposit Money to an Account&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;3- Withdraw Money from an Account&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;4- Display Current Balance of an Account&quot; &lt;&lt; endl;
int choice;
cin &gt;&gt; choice;
switch (choice) {
case 1: {
string name;
double initialBalance;
cout &lt;&lt; &quot;Enter your name: &quot;;
cin &gt;&gt; name;
cout &lt;&lt; &quot;Enter your initial balance: &quot;;
cin &gt;&gt; initialBalance;
accounts[numAccounts] = new BankAccount(name, initialBalance);
cout &lt;&lt; &quot;Congratulations &quot; &lt;&lt; name &lt;&lt; &quot;! You have successfully opened your
new bank account with an initial balance of $&quot; &lt;&lt; initialBalance &lt;&lt; &quot;. Your account
number is &quot; &lt;&lt; accounts[numAccounts]-&gt;getAccountNumber() &lt;&lt; &quot;.&quot; &lt;&lt; endl;
numAccounts++;
break;
}
case 2: {
int accountNumber;
double depositAmount;
cout &lt;&lt; &quot;Enter the account number: &quot;;

cin &gt;&gt; accountNumber;
bool found = false;
for (int i = 0; i &lt; numAccounts; ++i) {
if (accounts[i]-&gt;getAccountNumber() == accountNumber) {
found = true;
cout &lt;&lt; &quot;Enter the amount that you would like to deposit: &quot;;
cin &gt;&gt; depositAmount;
accounts[i]-&gt;deposit(depositAmount);
cout &lt;&lt; &quot;Congratulations &quot; &lt;&lt; accounts[i]-&gt;getName() &lt;&lt; &quot;! You have
successfully deposited the amount of $&quot; &lt;&lt; depositAmount &lt;&lt; &quot; in your account #&quot; &lt;&lt;
accountNumber &lt;&lt; &quot;. Your current balance is $&quot; &lt;&lt; accounts[i]-&gt;getBalance() &lt;&lt; &quot;.&quot; &lt;&lt;
endl;
break;
}
}
if (!found) {
cout &lt;&lt; &quot;No account number exists!&quot; &lt;&lt; endl;
}
break;
}
case 3: {
int accountNumber;
double withdrawAmount;
cout &lt;&lt; &quot;Enter the account number: &quot;;
cin &gt;&gt; accountNumber;
bool found = false;
for (int i = 0; i &lt; numAccounts; ++i) {
if (accounts[i]-&gt;getAccountNumber() == accountNumber) {
found = true;
cout &lt;&lt; &quot;Enter the amount that you would like to withdraw: &quot;;
cin &gt;&gt; withdrawAmount;
if (accounts[i]-&gt;withdraw(withdrawAmount)) {
cout &lt;&lt; &quot;Congratulations &quot; &lt;&lt; accounts[i]-&gt;getName() &lt;&lt; &quot;! You have
successfully withdrawn the amount of $&quot; &lt;&lt; withdrawAmount &lt;&lt; &quot; in your account #&quot; &lt;&lt;
accountNumber &lt;&lt; &quot;. Your current balance is $&quot; &lt;&lt; accounts[i]-&gt;getBalance() &lt;&lt; &quot;.&quot; &lt;&lt;
endl;
} else {
cout &lt;&lt; &quot;Insufficient funds!&quot; &lt;&lt; endl;
}
break;
}
}
if (!found) {
cout &lt;&lt; &quot;No account number exists!&quot; &lt;&lt; endl;
}
break;

}
case 4: {
int accountNumber;
cout &lt;&lt; &quot;Enter the account number: &quot;;
cin &gt;&gt; accountNumber;
bool found = false;
for (int i = 0; i &lt; numAccounts; ++i) {
if (accounts[i]-&gt;getAccountNumber() == accountNumber) {
found = true;
cout &lt;&lt; &quot;Your current balance is $&quot; &lt;&lt; accounts[i]-&gt;getBalance() &lt;&lt; &quot;.&quot; &lt;&lt;
endl;
break;
}
}
if (!found) {
cout &lt;&lt; &quot;No account number exists!&quot; &lt;&lt; endl;
}
break;
}
default:
cout &lt;&lt; &quot;Invalid choice&quot; &lt;&lt; endl;
}
// Clean up allocated memory
for (int i = 0; i &lt; numAccounts; ++i) {
delete accounts[i];
}
return 0;
}
